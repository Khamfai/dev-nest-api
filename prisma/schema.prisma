// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Languages {
  id        Int     @id @default(autoincrement())
  language  String  @db.VarChar(255)
  locale    String  @unique
  createdAt Float?
  updatedAt Float?
  isDeleted Boolean @default(false)
}

model Categories {
  id        Int     @id @default(autoincrement())
  shopId    Int
  printerId Int?
  name      String  @db.VarChar(255)
  createdBy Int?
  updatedBy Int?
  createdAt Float?
  updatedAt Float?
  isDeleted Boolean @default(false)

  shops    Shops      @relation(fields: [shopId], references: [id], onUpdate: Restrict, map: "categories_ibfk_1")
  printers Printers?  @relation(fields: [printerId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "categories_ibfk_2")
  products Products[]

  @@unique([shopId, name], map: "check_categories_duplicate_values")
  @@index([printerId], map: "printerId")
}

model Currencies {
  id        Int     @id @default(autoincrement())
  name      String
  symbol    String
  createdBy Int?
  updatedBy Int?
  createdAt Float?
  updatedAt Float?
  isDeleted Boolean @default(false)

  orderTransactions OrderTransactions[]
  rates             Rates[]
  shops             Shops[]
}

model Customers {
  id        Int     @id @default(autoincrement())
  shopId    Int
  name      String  @db.VarChar(255)
  tel       String? @db.VarChar(255)
  email     String? @db.VarChar(255)
  prId      Int?
  drId      Int?
  villId    Int?
  score     Int?
  createdBy Int?
  updatedBy Int?
  createdAt Float?
  updatedAt Float?
  isDeleted Boolean @default(false)

  shops        Shops          @relation(fields: [shopId], references: [id], onUpdate: Restrict, map: "customers_ibfk_1")
  transactions Transactions[]

  @@index([shopId], map: "customers_shopId_index")
}

model Plans {
  id        Int     @id @default(autoincrement())
  name      String  @db.VarChar(255)
  limitUser Int?
  limitBill Int?
  limitDay  Int?
  price     Int     @default(0)
  createdBy Int?
  updatedBy Int?
  createdAt Float?
  updatedAt Float?
  isDeleted Boolean @default(false)

  orderTransactions OrderTransactions[]
  orderPlans        OrderPlans[]
}

model OrderTransactions {
  id         Int            @id @default(autoincrement())
  odpId      Int
  shopId     Int
  planId     Int
  paymentId  Int
  currId     Int
  price      Int
  paymentStt PaymentStatus? @default(test)
  createdBy  Int?
  updatedBy  Int?
  createdAt  Float?
  updatedAt  Float?
  isDeleted  Boolean        @default(false)

  orderPlans      OrderPlans      @relation(fields: [odpId], references: [id], onUpdate: Restrict, map: "order_plan_transactions_ibfk_1")
  shops           Shops           @relation(fields: [shopId], references: [id], onUpdate: Restrict, map: "order_plan_transactions_ibfk_2")
  plans           Plans           @relation(fields: [planId], references: [id], onUpdate: Restrict, map: "order_plan_transactions_ibfk_3")
  paymentGateways PaymentGateways @relation(fields: [paymentId], references: [id], onUpdate: Restrict, map: "order_plan_transactions_ibfk_4")
  currencies      Currencies      @relation(fields: [currId], references: [id], onUpdate: Restrict, map: "order_plan_transactions_ibfk_5")

  @@index([currId], map: "order_plan_ts_currId_index")
  @@index([odpId], map: "order_plan_ts_odpId_index")
  @@index([paymentId], map: "order_plan_ts_paymentId_index")
  @@index([planId], map: "order_plan_ts_planId_index")
  @@index([shopId], map: "order_plan_ts_shopId_index")
}

model OrderPlans {
  id        Int     @id @default(autoincrement())
  shopId    Int
  planId    Int
  start     Float
  end       Float
  createdBy Int?
  updatedBy Int?
  createdAt Float?
  updatedAt Float?
  isDeleted Boolean @default(false)

  orderTransactions OrderTransactions[]
  shops             Shops               @relation(fields: [shopId], references: [id], onUpdate: Restrict, map: "order_plans_ibfk_1")
  plans             Plans               @relation(fields: [planId], references: [id], onUpdate: Restrict, map: "order_plans_ibfk_2")

  @@index([shopId, isDeleted])
  @@index([planId], map: "order_plans_planId_index")
  @@index([shopId], map: "order_plans_shopId_index")
}

model PaymentGateways {
  id        Int     @id @default(autoincrement())
  name      String
  createdBy Int?
  updatedBy Int?
  createdAt Float?
  updatedAt Float?
  isDeleted Boolean @default(false)

  order_plan_transactions OrderTransactions[]
  transactions            Transactions[]
}

model Permissions {
  id          Int     @id @default(autoincrement())
  permission  String  @unique(map: "permission") @db.VarChar(255)
  displayName String  @db.VarChar(255)
  createdAt   Float?
  updatedAt   Float?
  isDeleted   Boolean @default(false)

  userPermissions UserPermissions[]
}

model Printers {
  id        Int              @id @default(autoincrement())
  shopId    Int
  name      String           @db.VarChar(255)
  interface PrinterInterface @default(USB)
  paperSize Int              @default(58)
  ip        String?          @db.VarChar(255)
  port      Int?
  createdBy Int?
  updatedBy Int?
  createdAt Float?
  updatedAt Float?
  isDeleted Boolean          @default(false)

  categories Categories[]
  shops      Shops        @relation(fields: [shopId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "printers_ibfk_1")

  @@unique([shopId, name, interface, paperSize, ip, port], map: "check_printer_duplicate_values")
}

model Products {
  id        Int          @id @default(autoincrement())
  shopId    Int
  catId     Int
  name      String       @db.VarChar(255)
  barcode   String?      @db.VarChar(255)
  cost      Int?
  price     Int
  unit      ProductUnit?
  isSet     Boolean?     @default(false)
  isCF      Boolean?     @default(false)
  pic       String?      @db.VarChar(255)
  createdBy Int?
  updatedBy Int?
  createdAt Float?
  updatedAt Float?
  isDeleted Boolean      @default(false)

  shops              Shops                @relation(fields: [shopId], references: [id], onUpdate: Restrict, map: "products_ibfk_1")
  categories         Categories           @relation(fields: [catId], references: [id], onUpdate: Restrict, map: "products_ibfk_2")
  transactionDetails TransactionDetails[]
  stocks             Stocks[]

  @@index([catId], map: "products_catId_index")
  @@index([shopId], map: "products_shopId_index")
}

model Stocks {
  id        Int      @id @default(autoincrement())
  prodId    Int
  qty       Int
  remaining Int      @default(0)
  expDate   Float?
  createdBy Int?
  updatedBy Int?
  createdAt Float?
  updatedAt Float?
  isDeleted Boolean? @default(false)

  products Products @relation(fields: [prodId], references: [id])
}

model Promotions {
  id          Int     @id @default(autoincrement())
  shopId      Int
  name        String  @db.VarChar(255)
  code        String? @db.VarChar(255)
  discount    Int
  limitAmount Int?
  useAmount   Int?    @default(0)
  start       Float?
  end         Float?
  createdBy   Int?
  updatedBy   Int?
  createdAt   Float?
  updatedAt   Float?
  isDeleted   Boolean @default(false)

  shops Shops @relation(fields: [shopId], references: [id], onUpdate: Restrict, map: "promotions_ibfk_1")

  @@unique([shopId, name, code], map: "check_promotion_duplicate_values")
}

model Rates {
  id        Int     @id @default(autoincrement())
  rate      Int
  currId    Int
  shopId    Int
  createdBy Int?
  updatedBy Int?
  createdAt Float?
  updatedAt Float?
  isDeleted Boolean @default(false)

  currencies Currencies @relation(fields: [currId], references: [id], onUpdate: Restrict, map: "rates_ibfk_1")
  shops      Shops      @relation(fields: [shopId], references: [id], onUpdate: Restrict, map: "rates_ibfk_2")

  @@index([currId], map: "rates_currId_index")
  @@index([shopId], map: "rates_shopId_index")
}

model Shops {
  id         Int         @id @default(autoincrement())
  uid        Int
  currId     Int
  name       String      @db.VarChar(255)
  tel        String?     @db.VarChar(255)
  provinceId Int
  districtId Int
  villageId  Int
  vatType    VatType?
  vat        Int?        @default(0)
  shopType   ShopType    @default(shops)
  status     ShopsStatus @default(pending)
  pic        String?     @db.VarChar(255)
  createdBy  Int?
  updatedBy  Int?
  createdAt  Float?
  updatedAt  Float?
  isDeleted  Boolean     @default(false)

  categories          Categories[]
  customers           Customers[]
  orderTransactions   OrderTransactions[]
  orderPlans          OrderPlans[]
  printers            Printers[]
  products            Products[]
  promotions          Promotions[]
  rates               Rates[]
  currencies          Currencies           @relation(fields: [currId], references: [id], map: "shops_ibfk_1")
  tableZones          TableZones[]
  tables              Tables[]
  transaction_details TransactionDetails[]
  transactions        Transactions[]
  UserPermissions     UserPermissions[]

  @@index([currId], map: "shops_currId_index")
}

model TableZones {
  id        Int     @id @default(autoincrement())
  shopId    Int
  name      String  @db.VarChar(255)
  createdBy Int?
  updatedBy Int?
  createdAt Float?
  updatedAt Float?
  isDeleted Boolean @default(false)

  shops  Shops    @relation(fields: [shopId], references: [id], onUpdate: Restrict, map: "table_zones_ibfk_1")
  tables Tables[]

  @@unique([shopId, name], map: "check_duplicate_zone_values")
}

model Tables {
  id        Int     @id @default(autoincrement())
  shopId    Int
  zoneId    Int
  name      String  @db.VarChar(255)
  createdBy Int?
  updatedBy Int?
  createdAt Float?
  updatedAt Float?
  isDeleted Boolean @default(false)

  shops        Shops          @relation(fields: [shopId], references: [id], onUpdate: Restrict, map: "tables_ibfk_1")
  table_zones  TableZones     @relation(fields: [zoneId], references: [id], onUpdate: Restrict, map: "tables_ibfk_2")
  transactions Transactions[]

  @@unique([shopId, zoneId, name], map: "table_check_duplicate_values")
  @@index([zoneId], map: "tables_zoneId_index")
}

model TransactionDetails {
  id         Int            @id @default(autoincrement())
  shopId     Int
  tsId       Int
  proId      Int
  qty        Int
  price      Int
  subTotal   Int
  discount   Int?
  disVal     Int?
  total      Int
  printStt   PrintStatus?
  paymentStt PaymentStatus?
  comment    String?        @db.VarChar(255)
  createdBy  Int?
  updatedBy  Int?
  createdAt  Float?
  updatedAt  Float?
  isDeleted  Boolean        @default(false)

  shops        Shops        @relation(fields: [shopId], references: [id], onUpdate: Restrict, map: "transaction_details_ibfk_1")
  transactions Transactions @relation(fields: [tsId], references: [id], onUpdate: Restrict, map: "transaction_details_ibfk_2")
  products     Products     @relation(fields: [proId], references: [id], onUpdate: Restrict, map: "transaction_details_ibfk_3")

  @@index([proId], map: "ts_details_proId_index")
  @@index([shopId], map: "ts_details_shopId_index")
  @@index([tsId], map: "ts_details_tsId_index")
}

model Transactions {
  id         Int             @id @default(autoincrement())
  shopId     Int
  pgId       Int
  currId     Int
  tableId    Int
  cusId      Int?
  promoId    Int?
  billNumber String          @db.VarChar(255)
  subTotal   Int
  discount   Int?
  disVal     Int?
  sercharge  Int?
  serVal     Int?
  vat        Int?
  vatVal     Int?
  total      Int
  moneyRecv  Int?
  moneyChg   Int?
  people     Int?
  rate       Int?
  printStt   PrintStatus?    @default(pending)
  paymentStt PaymentStatus?  @default(pending)
  tsType     TransactionType
  comment    String?         @db.VarChar(255)
  createdBy  Int?
  updatedBy  Int?
  createdAt  Float?
  updatedAt  Float?
  isDeleted  Boolean         @default(false)

  transactionDetails TransactionDetails[]
  shops              Shops                @relation(fields: [shopId], references: [id], onUpdate: Restrict, map: "transactions_ibfk_1")
  paymentGateways    PaymentGateways      @relation(fields: [pgId], references: [id], onUpdate: Restrict, map: "transactions_ibfk_2")
  tables             Tables               @relation(fields: [tableId], references: [id], onUpdate: Restrict, map: "transactions_ibfk_3")
  customers          Customers?           @relation(fields: [promoId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "transactions_ibfk_4")

  @@index([pgId], map: "ts_pgId_index")
  @@index([promoId], map: "ts_promoId_index")
  @@index([shopId], map: "ts_shopId_index")
  @@index([tableId], map: "ts_tableId_index")
}

model UserPermissions {
  id        Int     @id @default(autoincrement())
  uid       Int
  shopId    Int
  permisId  Int
  createdAt Float?
  updatedAt Float?
  isDeleted Boolean @default(false)

  shops       Shops       @relation(fields: [shopId], references: [id])
  permissions Permissions @relation(fields: [permisId], references: [id], onDelete: Cascade, map: "user_permissions_ibfk_2")

  @@index([permisId], map: "user_permissions_permisId_index")
  @@index([uid], map: "user_permissions_uid_index")
}

enum PrinterInterface {
  USB
  Ethernet
  Blutooh
}

enum VatType {
  IN
  EXC
}

enum ProductUnit {
  wight
  entch
}

enum ShopType {
  shops
  restaurant
}

enum ShopsStatus {
  pending
  verified
  stop
}

enum PrintStatus {
  pending
  complete
}

enum PaymentStatus {
  test
  pending
  success
  cancel
}

enum TransactionType {
  income
  expen
}
